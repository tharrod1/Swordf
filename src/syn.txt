key functions:
keyBind <key> <func>: calls a func when key is pressed
ex: keyBind j jumpFunc

map functions:
addMap <name>: adds map data to map pool
getMap <id>: gets data of selected map
drawMap <data>: draws map from data
delMap <name>: deletes a map from memory
ex:{
getMap "dungeon.txt"
drawMap RET
}

STATE: unsigned int value of game state
ex: jne STATE 1

setOnKeyDown <func key>
setOnKeyUp <func key>
setOnScroll <func dist>
setOnClick <func x y>
setOnPause <func>
ex: setOnClick clickFunc

RET: last returned value
ex:{
logicFunc
uint STATE RET
}

T: true
F: false
cmp <val> <val>
jeq <label>
jne <label>
jor <label>
ex:{
cmp STATE 10
jeq exit
} 

: <label>
ex:{
:processStuff
}

defines a variable, sets a variable if already defined
str <label> <len>
int <label> <num> 
uint <label> <num>
f <label> <num>
uf <label> <num>
inFile <label> <path>
outFile <label> <path>
client <label> <host> <port>
server <label> <port>
list <label>
ex: f pi 3.14159

stdio:
toStr <var>

gets <str>: gets char from string
sets <str> <i> <c>: sets char (c) at i in string
setss <str> <str>: sets string from string
bind <server>: binds a socket on port given by server label
connect <client>: connects to a host on port given by client label
send <sock> <buf>: sends string buffer over socket
recv <sock> <buf>: stores recieved data to string buffer
close <sock>
ex:{
str hi 3
sets hi 0 h
sets hi 1 i
print hi
}
hardcoded strings should be avoided (android thing for some reason, but applies here since it would make files more organized)
